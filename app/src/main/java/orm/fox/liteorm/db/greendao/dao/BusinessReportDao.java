package orm.fox.liteorm.db.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import orm.fox.liteorm.db.greendao.entity.BusinessReport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BUSINESS_REPORT".
*/
public class BusinessReportDao extends AbstractDao<BusinessReport, Long> {

    public static final String TABLENAME = "BUSINESS_REPORT";

    /**
     * Properties of entity BusinessReport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Employee = new Property(1, String.class, "employee", false, "EMPLOYEE");
        public final static Property Customer = new Property(2, String.class, "customer", false, "CUSTOMER");
        public final static Property StartExpire = new Property(3, java.util.Date.class, "startExpire", false, "START_EXPIRE");
        public final static Property EndExpire = new Property(4, java.util.Date.class, "endExpire", false, "END_EXPIRE");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property TaskId = new Property(7, String.class, "taskId", false, "TASK_ID");
    }


    public BusinessReportDao(DaoConfig config) {
        super(config);
    }
    
    public BusinessReportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSINESS_REPORT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMPLOYEE\" TEXT," + // 1: employee
                "\"CUSTOMER\" TEXT," + // 2: customer
                "\"START_EXPIRE\" INTEGER," + // 3: startExpire
                "\"END_EXPIRE\" INTEGER," + // 4: endExpire
                "\"CITY\" TEXT," + // 5: city
                "\"CREATE_TIME\" INTEGER," + // 6: createTime
                "\"TASK_ID\" TEXT);"); // 7: taskId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSINESS_REPORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BusinessReport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String employee = entity.getEmployee();
        if (employee != null) {
            stmt.bindString(2, employee);
        }
 
        String customer = entity.getCustomer();
        if (customer != null) {
            stmt.bindString(3, customer);
        }
 
        java.util.Date startExpire = entity.getStartExpire();
        if (startExpire != null) {
            stmt.bindLong(4, startExpire.getTime());
        }
 
        java.util.Date endExpire = entity.getEndExpire();
        if (endExpire != null) {
            stmt.bindLong(5, endExpire.getTime());
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(8, taskId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BusinessReport entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String employee = entity.getEmployee();
        if (employee != null) {
            stmt.bindString(2, employee);
        }
 
        String customer = entity.getCustomer();
        if (customer != null) {
            stmt.bindString(3, customer);
        }
 
        java.util.Date startExpire = entity.getStartExpire();
        if (startExpire != null) {
            stmt.bindLong(4, startExpire.getTime());
        }
 
        java.util.Date endExpire = entity.getEndExpire();
        if (endExpire != null) {
            stmt.bindLong(5, endExpire.getTime());
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(7, createTime.getTime());
        }
 
        String taskId = entity.getTaskId();
        if (taskId != null) {
            stmt.bindString(8, taskId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BusinessReport readEntity(Cursor cursor, int offset) {
        BusinessReport entity = new BusinessReport( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // employee
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customer
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startExpire
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endExpire
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // createTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // taskId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BusinessReport entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmployee(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartExpire(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndExpire(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTaskId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BusinessReport entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BusinessReport entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BusinessReport entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
